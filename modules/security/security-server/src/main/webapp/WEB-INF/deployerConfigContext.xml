<?xml version="1.0" encoding="UTF-8"?>
<!-- Licensed to Jasig under one or more contributor license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. Jasig licenses this file to you under the Apache License, Version 2.0 (the "License"); 
	you may not use this file except in compliance with the License. You may obtain a copy of the License at the following location: 
	http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under 
	the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See 
	the License for the specific language governing permissions and limitations under the License. -->
<!-- | deployerConfigContext.xml centralizes into one file some of the declarative configuration that | all CAS deployers will 
	need to modify. | | This file declares some of the Spring-managed JavaBeans that make up a CAS deployment. | The beans declared 
	in this file are instantiated at context initialization time by the Spring | ContextLoaderListener declared in web.xml. It finds 
	this file because this | file is among those declared in the context parameter "contextConfigLocation". | | By far the most common 
	change you will need to make in this file is to change the last bean | declaration to replace the default SimpleTestUsernamePasswordAuthenticationHandler 
	with | one implementing your approach for authenticating usernames and passwords. + -->

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
       http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd">
	<!-- | This bean declares our AuthenticationManager. The CentralAuthenticationService service bean | declared in applicationContext.xml 
		picks up this AuthenticationManager by reference to its id, | "authenticationManager". Most deployers will be able to use the 
		default AuthenticationManager | implementation and so do not need to change the class of this bean. We include the whole | AuthenticationManager 
		here in the userConfigContext.xml so that you can see the things you will | need to change in context. + -->
	<bean id="authenticationManager" class="org.jasig.cas.authentication.AuthenticationManagerImpl">

		<!-- Uncomment the metadata populator to allow clearpass to capture and cache the password This switch effectively will turn 
			on clearpass. <property name="authenticationMetaDataPopulators"> <list> <bean class="org.jasig.cas.extension.clearpass.CacheCredentialsMetaDataPopulator"> 
			<constructor-arg index="0" ref="credentialsCache" /> </bean> </list> </property> -->

		<!-- | This is the List of CredentialToPrincipalResolvers that identify what Principal is trying to authenticate. | The AuthenticationManagerImpl 
			considers them in order, finding a CredentialToPrincipalResolver which | supports the presented credentials. | | AuthenticationManagerImpl 
			uses these resolvers for two purposes. First, it uses them to identify the Principal | attempting to authenticate to CAS /login 
			. In the default configuration, it is the DefaultCredentialsToPrincipalResolver | that fills this role. If you are using some 
			other kind of credentials than UsernamePasswordCredentials, you will need to replace | DefaultCredentialsToPrincipalResolver 
			with a CredentialsToPrincipalResolver that supports the credentials you are | using. | | Second, AuthenticationManagerImpl uses 
			these resolvers to identify a service requesting a proxy granting ticket. | In the default configuration, it is the HttpBasedServiceCredentialsToPrincipalResolver 
			that serves this purpose. | You will need to change this list if you are identifying services by something more or other than 
			their callback URL. + -->
		<property name="credentialsToPrincipalResolvers">
			<list>
				<!-- | UsernamePasswordCredentialsToPrincipalResolver supports the UsernamePasswordCredentials that we use for /login | by 
					default and produces SimplePrincipal instances conveying the username from the credentials. | | If you've changed your LoginFormAction 
					to use credentials other than UsernamePasswordCredentials then you will also | need to change this bean declaration (or add additional 
					declarations) to declare a CredentialsToPrincipalResolver that supports the | Credentials you are using. + -->
				<bean class="org.jasig.cas.authentication.principal.UsernamePasswordCredentialsToPrincipalResolver">
					<property name="attributeRepository" ref="attributeRepository" />
				</bean>
				<!-- | HttpBasedServiceCredentialsToPrincipalResolver supports HttpBasedCredentials. It supports the CAS 2.0 approach of 
					| authenticating services by SSL callback, extracting the callback URL from the Credentials and representing it as a | SimpleService 
					identified by that callback URL. | | If you are representing services by something more or other than an HTTPS URL whereat they 
					are able to | receive a proxy callback, you will need to change this bean declaration (or add additional declarations). + -->
				<bean class="org.jasig.cas.authentication.principal.HttpBasedServiceCredentialsToPrincipalResolver" />
			</list>
		</property>

		<!-- | Whereas CredentialsToPrincipalResolvers identify who it is some Credentials might authenticate, | AuthenticationHandlers 
			actually authenticate credentials. Here we declare the AuthenticationHandlers that | authenticate the Principals that the CredentialsToPrincipalResolvers 
			identified. CAS will try these handlers in turn | until it finds one that both supports the Credentials presented and succeeds 
			in authenticating. + -->
		<property name="authenticationHandlers">
			<list>
				<!-- | This is the authentication handler that authenticates services by means of callback via SSL, thereby validating | 
					a server side SSL certificate. + -->
				<bean class="org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler"
					p:httpClient-ref="httpClient" />
				<!-- | This is the authentication handler declaration that every CAS deployer will need to change before deploying CAS | 
					into production. The default SimpleTestUsernamePasswordAuthenticationHandler authenticates UsernamePasswordCredentials | where 
					the username equals the password. You will need to replace this with an AuthenticationHandler that implements your | local authentication 
					strategy. You might accomplish this by coding a new such handler and declaring | edu.someschool.its.cas.MySpecialHandler here, 
					or you might use one of the handlers provided in the adaptors modules. + -->
				<!-- <bean class="org.jasig.cas.authentication.handler.support.SimpleTestUsernamePasswordAuthenticationHandler" /> -->

				<bean class="org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler">
					<property name="sql" value="SELECT password FROM USERS WHERE username=?" />
					<property name="dataSource" ref="dataSource" />
					<property name="passwordEncoder" ref="passwordEncoder" />
				</bean>
			</list>
		</property>
	</bean>


	<!-- This bean defines the security roles for the Services Management application. Simple deployments can use the in-memory 
		version. More robust deployments will want to use another option, such as the Jdbc version. The name of this should remain "userDetailsService" 
		in order for Spring Security to find it. -->
	<!-- <sec:user name="@@THIS SHOULD BE REPLACED@@" password="notused" authorities="ROLE_ADMIN" /> -->

	<sec:user-service id="userDetailsService">
		<sec:user name="admin" password="notused" authorities="ROLE_ADMIN" />
	</sec:user-service>

	<!-- Bean that defines the attributes that a service may return. This example uses the Stub/Mock version. A real implementation 
		may go against a database or LDAP server. The id should remain "attributeRepository" though. -->
	<!-- 
	<bean id="attributeRepository" class="org.jasig.services.persondir.support.StubPersonAttributeDao">
		<property name="backingMap">
			<map>
				<entry key="uid" value="uid" />
				<entry key="eduPersonAffiliation" value="eduPersonAffiliation" />
				<entry key="groupMembership" value="groupMembership" />
			</map>
		</property>
	</bean> 
	-->
	
	<!-- Bean that returns authorization of the user as the profile attributes. -->
	<bean id="attributeRepository" class="org.jasig.services.persondir.support.jdbc.NamedParameterJdbcPersonAttributeDao" p:dataSource-ref="dataSource">
		<property name="sql">
			<value>
				SELECT role_name FROM USERS_ROLES WHERE username=:username
			</value>
		</property>	
		<property name="usernameAttributeProvider"> 
			<bean class="org.jasig.services.persondir.support.SimpleUsernameAttributeProvider"/>
		</property>
		<property name="userAttributeNames">
			<set>
				<value>role_name</value>
			</set>
		</property>
	</bean>
	

	<!-- Sample, in-memory data store for the ServiceRegistry. A real implementation would probably want to replace this with the 
		JPA-backed ServiceRegistry DAO The name of this bean should remain "serviceRegistryDao". -->
	<!-- <bean id="serviceRegistryDao" class="org.jasig.cas.services.InMemoryServiceRegistryDaoImpl">
		<property name="registeredServices">
			<list>
				<bean class="org.jasig.cas.services.RegexRegisteredService">
					<property name="id" value="0" />
					<property name="name" value="HTTP and IMAP" />
					<property name="description" value="Allows HTTP(S) and IMAP(S) protocols" />
					<property name="serviceId" value="^(https?|imaps?)://.*" />
					<property name="evaluationOrder" value="10000001" />
				</bean>

				Enabling OAuth2.0 support
				<bean class="org.jasig.cas.services.RegisteredServiceImpl">
					<property name="id" value="0" />
					<property name="name" value="HTTP" />
					<property name="description" value="oauth wrapper callback url" />
					<property name="serviceId" value="https://localhost:8443/openiot-cas/oauth2.0/callbackAuthorize" />
				</bean>

				<bean class="org.jasig.cas.services.RegisteredServiceImpl">
					<property name="id" value="1" />
					<property name="name" value="testkey1" />
					<property name="description" value="testsecret1" />
					<property name="serviceId" value="http://google.com" />
					<property name="theme" value="TheActualServiceName" />
				</bean>


				Use the following definition instead of the above to further restrict access to services within your domain (including 
					subdomains). Note that example.com must be replaced with the domain you wish to permit.
				<bean class="org.jasig.cas.services.RegexRegisteredService"> <property name="id" value="1" /> <property name="name" 
					value="HTTP and IMAP on example.com" /> <property name="description" value="Allows HTTP(S) and IMAP(S) protocols on example.com" 
					/> <property name="serviceId" value="^(https?|imaps?)://([A-Za-z0-9_-]+\.)*example\.com/.*" /> <property name="evaluationOrder" 
					value="0" /> </bean>
			</list>
		</property>
	</bean> -->

	<!-- Configuring the JPA service registry -->
	<bean id="serviceRegistryDao" class="org.jasig.cas.services.JpaServiceRegistryDaoImpl" p:entityManagerFactory-ref="entityManagerFactory" />

	<!-- This is the EntityManagerFactory configuration for Hibernate -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="generateDdl" value="true" />
				<property name="showSql" value="true" />
			</bean>
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- Configuring the JPA service registry -->

	<bean id="auditTrailManager" class="com.github.inspektr.audit.support.Slf4jLoggingAuditTrailManager" />

	<bean id="healthCheckMonitor" class="org.jasig.cas.monitor.HealthCheckMonitor">
		<property name="monitors">
			<list>
				<bean class="org.jasig.cas.monitor.MemoryMonitor" p:freeMemoryWarnThreshold="10" />
				<!-- NOTE The following ticket registries support SessionMonitor: * DefaultTicketRegistry * JpaTicketRegistry Remove this 
					monitor if you use an unsupported registry. -->
				<bean class="org.jasig.cas.monitor.SessionMonitor" p:ticketRegistry-ref="ticketRegistry"
					p:serviceTicketCountWarnThreshold="5000" p:sessionCountWarnThreshold="100000" />
			</list>
		</property>
	</bean>

	<!-- Configuring the datasource -->
	<!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> <property name="jndiName" value="java:/jboss/datasources/MySqlDS" 
		/> </bean> -->

	<jee:jndi-lookup id="dataSource" jndi-name="java:/jboss/datasources/MySqlDS" lookup-on-startup="false"
		proxy-interface="javax.sql.DataSource" />

	<bean id="passwordEncoder" class="org.jasig.cas.authentication.handler.DefaultPasswordEncoder" p:characterEncoding="UTF-8">
		<constructor-arg index="0" value="MD5" />
	</bean>
</beans>
