<?xml version="1.0" encoding="UTF-8"?>
<!--
     Copyright (c) 2011-2014, OpenIoT

     This file is part of OpenIoT.

     OpenIoT is free software: you can redistribute it and/or modify
     it under the terms of the GNU Lesser General Public License as published by
     the Free Software Foundation, version 3 of the License.

     OpenIoT is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU Lesser General Public License for more details.

     You should have received a copy of the GNU Lesser General Public License
     along with OpenIoT.  If not, see <http://www.gnu.org/licenses/>.

	  Contact: OpenIoT mailto: info@openiot.eu
/ -->

<!-- Author: Nikos Kefalakis (nkef@ait.edu.gr) -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<!-- =========================================================== -->
	<!-- Basics -->
	<!-- =========================================================== -->
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.openiot</groupId>
	<artifactId>sdum.core</artifactId>
	<version>0.0.1</version>
	<packaging>war</packaging>
	<name>OpenIoT sdum.core</name>
	<description>A Java EE 6 webapp project for JBoss AS 7.1 / EAP 6</description>
	<url>https://github.com/OpenIotOrg/openiot</url>

	<parent>
		<groupId>org.openiot</groupId>
		<artifactId>openiot</artifactId>
		<version>0.2-SNAPSHOT</version>
		<relativePath>../../../pom.xml</relativePath>
	</parent>

	<licenses>
		<license>
			<name>GNU Lesser General Public License, version 2.1</name>
			<distribution>repo</distribution>
			<url>http://www.gnu.org/licenses/lgpl-2.1.html</url>
		</license>
	</licenses>


	<!-- =========================================================== -->
	<!-- Properties -->
	<!-- =========================================================== -->
	<properties>
		<!-- Explicitly declaring the source encoding eliminates the following
			message: [WARNING] Using platform encoding (UTF-8 actually) to copy filtered
			resources, i.e. build is platform dependent!
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> -->

		<!-- JBoss dependency versions -->
		<version.jboss.maven.plugin>7.3.Final</version.jboss.maven.plugin>

		<!-- Define the version of JBoss' Java EE 6 APIs and Tools we want
		to import. -->
		<version.jboss.bom>1.0.4.Final</version.jboss.bom>

		<!-- Alternatively, comment out the above line, and un-comment the line
		below to use version 1.0.2.Final-redhat-1 which is a release certified to
		work with JBoss EAP 6. It requires you have access to the JBoss EAP 6
		maven repository. -->
		<!-- <version.jboss.bom>1.0.2.Final-redhat-1</version.jboss.bom>> -->

		<!-- other plugin versions -->
		<version.compiler.plugin>2.3.2</version.compiler.plugin>
		<version.surefire.plugin>2.4.3</version.surefire.plugin>
		<version.war.plugin>2.1.1</version.war.plugin>

		<!-- maven-compiler-plugin -->
		<maven.compiler.target>1.7</maven.compiler.target>
		<maven.compiler.source>1.7</maven.compiler.source>
	</properties>


	<!-- =========================================================== -->
	<!-- Parent -->
	<!-- =========================================================== -->
	<!-- to be filled -->

	<!-- =========================================================== -->
	<!-- Dependencies -->
	<!-- =========================================================== -->
	<dependencyManagement>
		<dependencies>
			<!-- JBoss distributes a complete set of Java EE 6 APIs including a Bill
			of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection)
			of artifacts. We use this here so that we always get the correct versions
			of artifacts. Here we use the jboss-javaee-6.0-with-tools stack (you can
			read this as the JBoss stack of the Java EE 6 APIs, with some extras tools
			for your project)) -->
			<dependency>
				<groupId>org.jboss.bom</groupId>
				<artifactId>jboss-javaee-6.0-with-tools</artifactId>
				<version>${version.jboss.bom}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<dependency>
				<groupId>org.jboss.bom</groupId>
				<artifactId>jboss-javaee-6.0-with-resteasy</artifactId>
				<version>${version.jboss.bom}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>


		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!--======== OpenIoT dependencies ============-->
		<dependency>
			<groupId>org.openiot</groupId>
			<artifactId>utils.commons</artifactId>
		</dependency>

		<!-- ========  CDI API Dependencies ========== -->
		<!-- We use provided scope as the API is included in JBoss AS 7 -->
		<dependency>
			<groupId>javax.enterprise</groupId>
			<artifactId>cdi-api</artifactId>
			<scope>provided</scope>
		</dependency>


		<!-- ======== JBoss Common Annotations API Dependencies ========== -->
		<!-- We use provided scope as the API is included in JBoss AS 7 -->
		<dependency>
			<groupId>org.jboss.spec.javax.annotation</groupId>
			<artifactId>jboss-annotations-api_1.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>


		<!-- ======== JSF API Dependencies ========== -->
		<!-- We use provided scope as the API is included in JBoss AS 7 -->
		<dependency>
			<groupId>org.jboss.spec.javax.faces</groupId>
			<artifactId>jboss-jsf-api_2.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>


		<!-- ======== JBoss RestEasy JAX-RS with JAXB support Dependencies ========== -->
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-jaxrs</artifactId>
			<version>2.3.6.Final</version>
		</dependency>
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-jaxb-provider</artifactId>
			<version>2.3.6.Final</version>
		</dependency>

		<!-- ====== org.eclipse.persistence.jaxb.JAXBContextFactory Dependencies -->

		<dependency>
			<groupId>org.eclipse.persistence</groupId>
			<artifactId>eclipselink</artifactId>
			<version>2.5.0</version>
		</dependency>


		<!-- ======== jUnit Dependencies ========== -->

		<!-- Needed for running tests  -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>


		<!-- ======== Sesame Dependencies ========== -->
		<dependency>
			<groupId>org.openrdf.sesame</groupId>
			<artifactId>sesame-query</artifactId>
			<version>2.7.0</version>
		</dependency>
		<dependency>
			<groupId>org.openrdf.sesame</groupId>
			<artifactId>sesame-queryresultio-sparqlxml</artifactId>
			<version>2.7.0</version>
		</dependency>
		<dependency>
			<groupId>org.openrdf.sesame</groupId>
			<artifactId>sesame-repository-sparql</artifactId>
			<version>2.7.0</version>
		</dependency>

		<!-- ======== LSM API Dependencies ========== -->

		<dependency>
			<groupId>org.openiot</groupId>
			<artifactId>lsm-light.client</artifactId>
		</dependency>

		<dependency>
			<groupId>dom4j</groupId>
			<artifactId>dom4j</artifactId>
			<version>1.6.1</version>
		</dependency>



		<!-- ======== LogBack Dependencies ========== -->

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
		</dependency>
		<!-- Apache commons-logging Required By Sesame -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
		</dependency>


		<!-- ========javamelody (monitoring) dependency ==========-->
		<dependency>
			<groupId>net.bull.javamelody</groupId>
			<artifactId>javamelody-core</artifactId>
			<version>1.74.0</version>
		</dependency>



	</dependencies>




	<!-- =========================================================== -->
	<!-- Plugins -->
	<!-- =========================================================== -->

	<build>
		<!-- Maven will append the version to the finalName (which is the name
		given to the generated war, and hence the context root) -->
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<!-- Compiler plugin enforces Java 1.6 compatibility and activates annotation
			processors -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${version.compiler.plugin}</version>
				<configuration>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.target}</target>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>${version.war.plugin}</version>
				<configuration>
					<!-- Java EE 6 doesn't require web.xml, Maven needs to catch up! -->
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
			<!-- The JBoss AS plugin deploys your war to a local JBoss AS container -->
			<!-- To use, run: mvn package jboss-as:deploy -->
			<plugin>
				<groupId>org.jboss.as.plugins</groupId>
				<artifactId>jboss-as-maven-plugin</artifactId>
				<version>${version.jboss.maven.plugin}</version>
			</plugin>
		</plugins>
	</build>


	<!-- =========================================================== -->
	<!-- profiles -->
	<!-- =========================================================== -->
	<profiles>
		<profile>
			<!-- The default profile skips all tests, though you can tune it to run
			just unit tests based on a custom pattern -->
			<!-- Separate profiles are provided for running all tests, including Arquillian
			tests that execute in the specified container -->
			<id>default</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>${version.surefire.plugin}</version>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- When built in OpenShift the 'openshift' profile will be used when
			invoking mvn. -->
			<!-- Use this profile for any OpenShift specific customization your app
			will need. -->
			<!-- By default that is to put the resulting archive into the 'deployments'
			folder. -->
			<!-- http://maven.apache.org/guides/mini/guide-building-for-different-environments.html -->
			<id>openshift</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-war-plugin</artifactId>
						<version>${version.war.plugin}</version>
						<configuration>
							<outputDirectory>deployments</outputDirectory>
							<warName>ROOT</warName>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>

	<!-- =========================================================== -->
	<!-- Repositories -->
	<!-- =========================================================== -->

	<repositories>
	</repositories>

	<pluginRepositories>
	</pluginRepositories>
</project>
