<?xml version="1.0" encoding="UTF-8"?>
<!--
     Copyright (c) 2011-2014, OpenIoT

     This file is part of OpenIoT.

     OpenIoT is free software: you can redistribute it and/or modify
     it under the terms of the GNU Lesser General Public License as published by
     the Free Software Foundation, version 3 of the License.

     OpenIoT is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU Lesser General Public License for more details.

     You should have received a copy of the GNU Lesser General Public License
     along with OpenIoT.  If not, see <http://www.gnu.org/licenses/>.

	  Contact: OpenIoT mailto: info@openiot.eu
/ -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.openiot</groupId>
	<artifactId>ide.core</artifactId>
	<version>0.0.1</version>
	<packaging>war</packaging>
	<name>OpenIoT ide.core</name>
	<description>A starter Java EE 6 webapp project for use on JBoss AS 7 / EAP 6,
		generated from the jboss-javaee6-webapp archetype
	</description>

	<parent>
		<groupId>org.openiot</groupId>
		<artifactId>openiot</artifactId>
		<version>0.2-SNAPSHOT</version>
		<relativePath>../../../pom.xml</relativePath>
	</parent>

	<url>http://jboss.org/jbossas</url>
	<licenses>
		<license>
			<name>Apache License, Version 2.0</name>
			<distribution>repo</distribution>
			<url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
		</license>
	</licenses>

	<properties>
		<!-- Explicitly declaring the source encoding eliminates the following
		message: -->
		<!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered
		resources, i.e. build is platform dependent! -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- JBoss dependency versions -->
		<version.jboss.maven.plugin>7.3.Final</version.jboss.maven.plugin>

		<!-- Define the version of the JBoss BOMs we want to import to specify
		tested stacks. -->
		<version.jboss.bom>1.0.4.Final</version.jboss.bom>
		<!-- Alternatively, comment out the above line, and un-comment the line
		below to use version 1.0.2.Final-redhat-1 which is a release certified to
		work with JBoss EAP 6. It requires you have access to the JBoss EAP 6 maven
		repository. -->
		<!-- <version.jboss.bom>1.0.2.Final-redhat-1</version.jboss.bom>> -->

		<!-- other plugin versions -->
		<version.compiler.plugin>3.1</version.compiler.plugin>
		<version.surefire.plugin>2.4.3</version.surefire.plugin>
		<version.war.plugin>2.4</version.war.plugin>

		<!-- maven-compiler-plugin -->
		<maven.compiler.target>1.7</maven.compiler.target>
		<maven.compiler.source>1.7</maven.compiler.source>
	</properties>


	<dependencyManagement>
		<dependencies>
			<!-- JBoss distributes a complete set of Java EE 6 APIs including a Bill
			of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection)
			of artifacts. We use this here so that we always get the correct versions
			of artifacts. Here we use the jboss-javaee-6.0-with-tools stack (you can
			read this as the JBoss stack of the Java EE 6 APIs, with some extras tools
			for your project, such as Arquillian for testing) and the jboss-javaee-6.0-with-hibernate
			stack you can read this as the JBoss stack of the Java EE 6 APIs, with extras
			from the Hibernate family of projects) -->
			<dependency>
				<groupId>org.jboss.bom</groupId>
				<artifactId>jboss-javaee-6.0-with-tools</artifactId>
				<version>${version.jboss.bom}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>

		<!-- First declare the APIs we depend on and need for compilation. All
		of them are provided by JBoss AS 7 -->

		<!-- Import the CDI API, we use provided scope as the API is included in
		JBoss AS 7 -->
		<dependency>
			<groupId>javax.enterprise</groupId>
			<artifactId>cdi-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the Common Annotations API (JSR-250), we use provided scope
		as the API is included in JBoss AS 7 -->
		<dependency>
			<groupId>org.jboss.spec.javax.annotation</groupId>
			<artifactId>jboss-annotations-api_1.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>


		<dependency>
			<groupId>org.jboss.spec.javax.faces</groupId>
			<artifactId>jboss-jsf-api_2.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Now we declare any tools needed -->

		<!-- Annotation processor to generate the JPA 2.0 metamodel classes for
		typesafe criteria queries -->

		<!-- Annotation processor that raising compilation errors whenever constraint
		annotations are incorrectly used. -->

		<!-- Needed for running tests (you may also use TestNG) -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Optional, but highly recommended -->
		<!-- Arquillian allows you to test enterprise code such as EJBs and Transactional(JTA)
		JPA from JUnit/TestNG -->
		<dependency>
			<groupId>org.primefaces</groupId>
			<artifactId>primefaces</artifactId>
			<version>4.0</version>
		</dependency>

		<dependency>
			<groupId>org.primefaces.extensions</groupId>
			<artifactId>primefaces-extensions</artifactId>
			<version>1.2.1</version>
		</dependency>

		<dependency>
			<groupId>org.primefaces.themes</groupId>
			<artifactId>all-themes</artifactId>
			<version>1.0.10</version>
		</dependency>

		<dependency>
			<groupId>net.bull.javamelody</groupId>
			<artifactId>javamelody-core</artifactId>
			<version>1.74.0</version>
		</dependency>

		<dependency>
			<groupId>org.omnifaces</groupId>
			<artifactId>omnifaces</artifactId>
			<version>1.6.3</version>
		</dependency>

		<dependency>
			<groupId>org.openiot</groupId>
			<artifactId>utils.commons</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.1</version>
		</dependency>

		<dependency>
			<groupId>org.apache.directory.studio</groupId>
			<artifactId>org.apache.commons.collections</artifactId>
			<version>3.2.1</version>
		</dependency>

	</dependencies>

	<build>
		<!-- Maven will append the version to the finalName (which is the name
		given to the generated war, and hence the context root) -->
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<!-- Compiler plugin enforces Java 1.6 compatibility and activates annotation
			processors -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${version.compiler.plugin}</version>
				<configuration>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.target}</target>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>${version.war.plugin}</version>
				<configuration>
					<!-- Java EE 6 doesn't require web.xml, Maven needs to catch up! -->
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
			<!-- The JBoss AS plugin deploys your war to a local JBoss AS container -->
			<!-- To use, run: mvn package jboss-as:deploy -->
			<plugin>
				<groupId>org.jboss.as.plugins</groupId>
				<artifactId>jboss-as-maven-plugin</artifactId>
				<version>${version.jboss.maven.plugin}</version>
			</plugin>

		</plugins>
	</build>

	<profiles>
		<profile>
			<!-- The default profile skips all tests, though you can tune it to run
			just unit tests based on a custom pattern -->
			<!-- Seperate profiles are provided for running all tests, including Arquillian
			tests that execute in the specified container -->
			<id>default</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>${version.surefire.plugin}</version>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<!-- =========================================================== -->
	<!-- Repositories -->
	<!-- =========================================================== -->
	<repositories>
		<repository>
			<id>prime-repo</id>
			<name>PrimeFaces Maven Repository</name>
			<url>http://repository.primefaces.org</url>
			<layout>default</layout>
		</repository>
	</repositories>
</project>
